/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;

    public Node() {}
    
    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, Node _left, Node _right, Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/

class Solution 
{
    void connectRecursive(Node root)
    {
        if(root==null)
            return;
        if(root.left!=null)
        {
            root.left.next=(root.right!=null)?(root.right):null;
        }
        if (root.right!=null)
        {
            root.right.next = (root.next!=null )? (root.next.left) : null;
        }
        
        connectRecursive(root.left);
        connectRecursive(root.right);
    }
    public Node connect(Node root) 
    {
        if(root==null)
            return null;
        root.next=null;
        connectRecursive(root);
        return root;
    }
}
#Rijushree
